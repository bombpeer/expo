{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../src/app/components/Text.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAE1D,OAAO,MAAM,MAAM,qBAAqB,CAAC;AAUzC,SAAS,aAAa,CAAC,KAAY,EAAE,SAAuB;IAC1D,IAAI,KAAK,GAAG,QAAQ,EAAE,CAAC;IACvB,IAAI,cAAc,GAAG,KAAK,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC;IAE5C,IAAI,cAAc,EAAE;QAClB,OAAO,cAAc,CAAC;KACvB;SAAM;QACL,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC;KACjC;AACH,CAAC;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAY,EAAE,EAAE;IAC/C,IAAI,EAAE,KAAK,EAAE,GAAG,UAAU,EAAE,GAAG,KAAK,CAAC;IACrC,IAAI,KAAK,GAAG,aAAa,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;IAErD,OAAO,oBAAC,IAAI,kBAAC,KAAK,EAAE,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,IAAM,UAAU,EAAI,CAAC;AACtF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAY,EAAE,EAAE;IAC/C,IAAI,EAAE,KAAK,EAAE,GAAG,UAAU,EAAE,GAAG,KAAK,CAAC;IACrC,IAAI,KAAK,GAAG,aAAa,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAE9C,OAAO,oBAAC,IAAI,kBAAC,KAAK,EAAE,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,IAAM,UAAU,EAAI,CAAC;AACtF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAY,EAAE,EAAE;IACzC,IAAI,EAAE,KAAK,EAAE,GAAG,UAAU,EAAE,GAAG,KAAK,CAAC;IACrC,IAAI,KAAK,GAAG,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEzC,OAAO,oBAAC,IAAI,kBAAC,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,IAAM,UAAU,EAAI,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,gBAAgB,EAAE;QAChB,aAAa,EAAE,IAAI;QACnB,GAAG,QAAQ,CAAC,MAAM,CAAC;YACjB,GAAG,EAAE;gBACH,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,EAAE;aACb;YACD,OAAO,EAAE;gBACP,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,EAAE;aACb;SACF,CAAC;KACH;IACD,gBAAgB,EAAE;QAChB,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,SAAS;QAC7B,QAAQ,EAAE,EAAE;QACZ,WAAW,EAAE,EAAE;QACf,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,KAAK;KAClB;CACF,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useTheme } from 'react-navigation';\nimport { Platform, StyleSheet, Text } from 'react-native';\n\nimport Colors from '../constants/Colors';\n\ntype TextProps = Text['props'];\ninterface Props extends TextProps {\n  lightColor?: string;\n  darkColor?: string;\n}\n\ntype ThemedColors = keyof typeof Colors.light & keyof typeof Colors.dark;\n\nfunction useThemeColor(props: Props, colorName: ThemedColors) {\n  let theme = useTheme();\n  let colorFromProps = props[`${theme}Color`];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\nexport const SectionLabelText = (props: Props) => {\n  let { style, ...otherProps } = props;\n  let color = useThemeColor(props, 'sectionLabelText');\n\n  return <Text style={[styles.sectionLabelText, { color }, style]} {...otherProps} />;\n};\n\nexport const GenericCardTitle = (props: Props) => {\n  let { style, ...otherProps } = props;\n  let color = useThemeColor(props, 'cardTitle');\n\n  return <Text style={[styles.genericCardTitle, { color }, style]} {...otherProps} />;\n};\n\nexport const StyledText = (props: Props) => {\n  let { style, ...otherProps } = props;\n  let color = useThemeColor(props, 'text');\n\n  return <Text style={[{ color }, style]} {...otherProps} />;\n};\n\nconst styles = StyleSheet.create({\n  sectionLabelText: {\n    letterSpacing: 0.92,\n    ...Platform.select({\n      ios: {\n        fontWeight: '500',\n        fontSize: 11,\n      },\n      android: {\n        fontWeight: '400',\n        fontSize: 12,\n      },\n    }),\n  },\n  genericCardTitle: {\n    color: Colors.light.blackText,\n    fontSize: 16,\n    marginRight: 50,\n    marginBottom: 2,\n    fontWeight: '400',\n  },\n});\n"]}