{"version":3,"file":"Views.js","sourceRoot":"","sources":["../../../src/app/components/Views.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useTheme } from 'react-navigation';\nimport { StyleSheet, View, ScrollView } from 'react-native';\nimport TouchableNativeFeedbackSafe from '@expo/react-native-touchable-native-feedback-safe';\nimport Colors from '../constants/Colors';\n\ntype ViewProps = View['props'];\ninterface Props extends ViewProps {\n  lightBackgroundColor?: string;\n  darkBackgroundColor?: string;\n  lightBorderColor?: string;\n  darkBorderColor?: string;\n}\n\ntype ScrollViewProps = ScrollView['props'];\ninterface StyledScrollViewProps extends ScrollViewProps {\n  lightBackgroundColor?: string;\n  darkBackgroundColor?: string;\n}\n\ntype ThemedColors = keyof typeof Colors.light & keyof typeof Colors.dark;\n\nfunction useThemeBackgroundColor(props: Props | StyledScrollViewProps, colorName: ThemedColors) {\n  let theme = useTheme();\n  let colorFromProps = props[`${theme}BackgroundColor`];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\nfunction useThemeBorderColor(props: Props, colorName: ThemedColors) {\n  let theme = useTheme();\n  let colorFromProps = props[`${theme}BorderColor`];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\nexport const StyledScrollView = React.forwardRef(\n  (props: StyledScrollViewProps, ref?: React.Ref<ScrollView>) => {\n    let { style, ...otherProps } = props;\n    let backgroundColor = useThemeBackgroundColor(props, 'absolute');\n\n    return <ScrollView {...otherProps} style={[{ backgroundColor }, style]} ref={ref} />;\n  }\n);\n\nexport const Separator = (props: View['props']) => {\n  let theme = useTheme();\n  let { style, ...otherProps } = props;\n\n  return (\n    <View\n      style={[styles.separator, { backgroundColor: Colors[theme].separator }, style]}\n      {...otherProps}\n    />\n  );\n};\n\nexport const SectionLabelContainer = (props: View['props']) => {\n  let theme = useTheme();\n  let { style, ...otherProps } = props;\n\n  return (\n    <View\n      style={[\n        styles.sectionLabelContainer,\n        { backgroundColor: Colors[theme].sectionLabelBackgroundColor },\n        style,\n      ]}\n      {...otherProps}\n    />\n  );\n};\n\nexport const GenericCardContainer = (props: View['props']) => {\n  let theme = useTheme();\n  let { style, ...otherProps } = props;\n\n  return (\n    <View\n      style={[\n        styles.genericCardContainer,\n        {\n          backgroundColor: Colors[theme].cardBackground,\n          borderBottomColor: Colors[theme].cardSeparator,\n        },\n        style,\n      ]}\n      {...otherProps}\n    />\n  );\n};\n\nexport const GenericCardBody = (props: View['props']) => {\n  let { style, ...otherProps } = props;\n\n  return <View style={[styles.genericCardBody, style]} {...otherProps} />;\n};\n\nexport const StyledView = (props: Props) => {\n  let {\n    style,\n    lightBackgroundColor: _lightBackgroundColor,\n    darkBackgroundColor: _darkBackgroundColor,\n    lightBorderColor: _lightBorderColor,\n    darkBorderColor: _darkBorderColor,\n    ...otherProps\n  } = props;\n\n  let backgroundColor = useThemeBackgroundColor(props, 'background');\n  let borderColor = useThemeBorderColor(props, 'border');\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor,\n          borderColor,\n        },\n        style,\n      ]}\n      {...otherProps}\n    />\n  );\n};\n\ntype ButtonProps = Props & TouchableNativeFeedbackSafe['props'];\n\n// Extend this if you ever need to customize ripple color\nfunction useRippleColor(_props: any) {\n  let theme = useTheme();\n  return theme === 'light' ? '#ccc' : '#fff';\n}\n\nexport const StyledButton = (props: ButtonProps) => {\n  let {\n    style,\n    lightBackgroundColor: _lightBackgroundColor,\n    darkBackgroundColor: _darkBackgroundColor,\n    lightBorderColor: _lightBorderColor,\n    darkBorderColor: _darkBorderColor,\n    ...otherProps\n  } = props;\n\n  let backgroundColor = useThemeBackgroundColor(props, 'cardBackground');\n  let borderColor = useThemeBorderColor(props, 'cardSeparator');\n  let rippleColor = useRippleColor(props);\n\n  return (\n    <TouchableNativeFeedbackSafe\n      background={TouchableNativeFeedbackSafe.Ripple(rippleColor, false)}\n      style={[\n        {\n          backgroundColor,\n          borderColor,\n        },\n        style,\n      ]}\n      {...otherProps}\n    />\n  );\n};\n\ntype IconProps = {\n  component: React.ReactType;\n  name: string;\n  size: number;\n  color: string;\n};\n\nexport const StyledIcon = (props: IconProps) => {\n  const theme = useTheme();\n  const { component: Component, color, ...rest } = props;\n\n  return <Component {...rest} color={Colors[theme]?.[color]} />;\n};\n\nconst styles = StyleSheet.create({\n  separator: {\n    height: StyleSheet.hairlineWidth * 2,\n    flex: 1,\n  },\n  sectionLabelContainer: {\n    flexDirection: 'row',\n    paddingVertical: 10,\n    alignItems: 'center',\n    paddingHorizontal: 15,\n  },\n  genericCardContainer: {\n    flexGrow: 1,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n  genericCardBody: {\n    paddingTop: 20,\n    paddingLeft: 15,\n    paddingRight: 10,\n    paddingBottom: 17,\n  },\n});\n"]}