{"version":3,"file":"DevMenuInternal.js","sourceRoot":"","sources":["../../src/app/DevMenuInternal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAqB,MAAM,cAAc,CAAC;AAGpF,MAAM,OAAO,GAAG,aAAa,CAAC,mBAAmB,CAAC;AAElD,wFAAwF;AACxF,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE;IACtC,kBAAkB,CAAC,cAAc,GAAG;QAClC,WAAW,KAAI,CAAC;QAChB,eAAe,KAAI,CAAC;QACpB,KAAK,CAAC,SAAS,KAAI,CAAC;KACrB,CAAC;CACH;AAED,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,yDAAU,CAAA;IACV,uDAAS,CAAA;AACX,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AA4BD,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO;QACL,mBAAmB,EAAE,eAAe;QACpC,oBAAoB,EAAE,IAAI;QAC1B,mBAAmB,EAAE,IAAI;KAC1B,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,KAAI,CAAC;AAE9C,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,QAAgB;IACxD,OAAO,MAAM,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,UAAU,QAAQ;IACtB,OAAO,CAAC,QAAQ,EAAE,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,QAAiB;IACrD,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAAoB;IACzD,OAAO,kBAAkB,CAAC,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AAClE,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\nimport { DeviceEventEmitter, NativeModules, EventSubscription } from 'react-native';\nimport { ColorSchemeName } from 'react-native-appearance';\n\nconst DevMenu = NativeModules.ExpoDevMenuInternal;\n\n// Mock ExpoFontLoader unimodule - we don't have access to unimodules from dev menu app.\nif (!NativeModulesProxy.ExpoFontLoader) {\n  NativeModulesProxy.ExpoFontLoader = {\n    addListener() {},\n    removeListeners() {},\n    async loadAsync() {},\n  };\n}\n\nexport enum DevMenuItemEnum {\n  ACTION = 1,\n  GROUP = 2,\n}\n\ntype DevMenuItemBaseType<T extends DevMenuItemEnum> = {\n  type: T;\n  isAvailable: boolean;\n  isEnabled: boolean;\n  label?: string | null;\n  detail?: string | null;\n  glyphName?: string | null;\n};\n\nexport type DevMenuItemActionType = DevMenuItemBaseType<DevMenuItemEnum.ACTION> & {\n  actionId: string;\n};\n\nexport type DevMenuItemGroupType = DevMenuItemBaseType<DevMenuItemEnum.GROUP> & {\n  groupName: string | null;\n  items: DevMenuItemAnyType[];\n};\n\nexport type DevMenuItemAnyType = DevMenuItemActionType | DevMenuItemGroupType;\n\nexport type DevMenuSettingsType = {\n  preferredAppearance?: ColorSchemeName;\n  motionGestureEnabled?: boolean;\n  touchGestureEnabled?: boolean;\n};\n\nexport async function getSettingsAsync(): Promise<DevMenuSettingsType> {\n  return {\n    preferredAppearance: 'no-preference',\n    motionGestureEnabled: true,\n    touchGestureEnabled: true,\n  };\n}\n\nexport async function updateSettingsAsync() {}\n\nexport async function dispatchActionAsync(actionId: string): Promise<void> {\n  return await DevMenu.dispatchActionAsync(actionId);\n}\n\nexport function hideMenu(): void {\n  DevMenu.hideMenu();\n}\n\nexport function setOnboardingFinished(finished: boolean): void {\n  DevMenu.setOnboardingFinished(finished);\n}\n\nexport function subscribeToCloseEvents(listener: () => void): EventSubscription {\n  return DeviceEventEmitter.addListener('closeDevMenu', listener);\n}\n"]}